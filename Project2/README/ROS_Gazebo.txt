# Create the `my_robot` package

## STEP1: Create ad initialize a `catkin_ws`
$ mkdir -p /home/workspace/catkin_ws/src
$ cd /home/workspace/catkin_ws/src
$ catkin_init_workspace

## STEP2: Navigate to the `src` directory of your `catkin_ws` and create the `my_robot` package

$ cd /home/workspace/catkin_ws/src
$ catkin_create_pkg my_robot

## STEP3: Create a `worlds` directory and a `launch` directory

$ cd /home/workspace/catkin_ws/src/my_robot/
$ mkdir launch
$ mkdir worlds


# Create and store an empty Gazebo world file

## STEP1: Create an empty Gazebo world

$ cd /home/workspace/catkin_ws/src/my_robot/worlds/
$ touch empty.world

## STEP2: Add the following to `empty.world`
"""
<?xml version="1.0" ?>

<sdf version="1.4">

  <world name="default">

    <include>
      <uri>model://ground_plane</uri>
    </include>

    <!-- Light source -->
    <include>
      <uri>model://sun</uri>
    </include>

    <!-- World camera -->
    <gui fullscreen='0'>
      <camera name='world_camera'>
        <pose>4.927360 -4.376610 3.740080 0.000000 0.275643 2.356190</pose>
        <view_controller>orbit</view_controller>
      </camera>
    </gui>

  </world>
</sdf>
"""

# Create a launch file

## STEP1: Create the `world.launch` file

$ cd /home/workspace/catkin_ws/src/my_robot/launch/
$ touch world.launch

## STEP2: Add the following to `world.launch`

"""
<?xml version="1.0" encoding="UTF-8"?>

<launch>

  <!-- World File -->
  <arg name="world_file" default="$(find my_robot)/worlds/empty.world"/>

  <!-- Launch Gazebo World -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="use_sim_time" value="true"/>
    <arg name="debug" value="false"/>
    <arg name="gui" value="true" />
    <arg name="world_name" value="$(arg world_file)"/>
  </include>

</launch>
"""

# Launch `empty.world`

$ cd /home/workspace/catkin_ws/
$ catkin_make
$ source devel/setup.bash
$ roslaunch my_robot world.launch


# Create the URDF file

## STEP1: Create a `urdf` directory in the `my_robot` package

$ cd /home/workspace/catkin_ws/src/my_robot/
$ mkdir urdf

## STEP2: Create the robot's `xacro` file inside the `urdf` directory

$ cd /home/workspace/catkin_ws/src/my_robot/urdf/
$ touch my_robot.xacro

## STEP3: Copy paste the following into `my_robot.xacro` file

"""
<?xml version='1.0'?>

<robot name="my_robot" xmlns:xacro="http://www.ros.org/wiki/xacro">

  <link name="robot_footprint"></link>

  <joint name="robot_footprint_joint" type="fixed">
    <origin xyz="0 0 0" rpy="0 0 0" />
    <parent link="robot_footprint"/>
    <child link="chassis" />
  </joint>

  <link name='chassis'>
    <pose>0 0 0.1 0 0 0</pose>

    <inertial>
      <mass value="15.0"/>
      <origin xyz="0.0 0 0" rpy=" 0 0 0"/>
      <inertia
          ixx="0.1" ixy="0" ixz="0"
          iyy="0.1" iyz="0"
          izz="0.1"
      />
    </inertial>

    <collision name='collision'>
      <origin xyz="0 0 0" rpy=" 0 0 0"/>
      <geometry>
        <box size=".4 .2 .1"/>
      </geometry>
    </collision>

    <visual name='chassis_visual'>
      <origin xyz="0 0 0" rpy=" 0 0 0"/>
      <geometry>
        <box size=".4 .2 .1"/>
      </geometry>
    </visual>


    <collision name='back_caster_collision'>
      <origin xyz="-0.15 0 -0.05" rpy=" 0 0 0"/>
      <geometry>
        <sphere radius="0.0499"/>
      </geometry>
    </collision>

    <visual name='back_caster_visual'>
      <origin xyz="-0.15 0 -0.05" rpy=" 0 0 0"/>
      <geometry>
        <sphere radius="0.05"/>
      </geometry>
    </visual>

    <collision name='front_caster_collision'>
      <origin xyz="0.15 0 -0.05" rpy=" 0 0 0"/>
      <geometry>
        <sphere radius="0.0499"/>
      </geometry>
    </collision>

    <visual name='front_caster_visual'>
      <origin xyz="0.15 0 -0.05" rpy=" 0 0 0"/>
      <geometry>
        <sphere radius="0.05"/>
      </geometry>
    </visual>

  </link>

</robot>
"""

# Launch the robot

## STEP1: Create a new launch file to load the `urdf` model File

$ cd /home/workspace/catkin_ws/src/my_robot/launch/
$ touch robot_description.launch

## STEP2: Copy the following code into `robot_description.launch` file

"""
<?xml version="1.0"?>
<launch>

  <!-- send urdf to param server -->
  <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find my_robot)/urdf/my_robot.xacro'" />

</launch>
"""

## STEP3: Update the `world.launch` file created earlier so that Gazebo can load the robot `URDF` model

Add the following to the launch file (after <launch>)
"""
<!-- Robot pose -->
  <arg name="x" default="0"/>
  <arg name="y" default="0"/>
  <arg name="z" default="0"/>
  <arg name="roll" default="0"/>
  <arg name="pitch" default="0"/>
  <arg name="yaw" default="0"/>

  <!-- Launch other relevant files-->
  <include file="$(find my_robot)/launch/robot_description.launch"/>
"""


Add the following to the launch file (before </launch>)
"""
<!-- Find my robot Description-->
  <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find my_robot)/urdf/my_robot.xacro'"/>

  <!-- Spawn My Robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
        args="-urdf -param robot_description -model my_robot
              -x $(arg x) -y $(arg y) -z $(arg z)
              -R $(arg roll) -P $(arg pitch) -Y $(arg yaw)"/>
"""

# launch

$ cd /home/workspace/catkin_ws/
$ catkin_make
$ source devel/setup.bash
$ roslaunch my_robot world.launch

# Robot enhancement

## Create wheel `links`

Add the following to the `my_robot.xacro` file (before </robot>)

"""
 <link name="left_wheel">
   <inertial>
     <origin xyz="0 0 0" rpy="0 1.5707 1.5707"/>
     <mass value="5"/>
     <inertia ixx="0.1"  ixy="0"  ixz="0" iyy="0.1" iyz="0" izz="0.1" />
   </inertial>

   <visual>
     <origin xyz="0 0 0" rpy="0 1.5707 1.5707"/>
     <geometry>
       <cylinder radius="0.1" length="0.05"/>
     </geometry>
     <material name="Cyan">
       <color rgba="0 1.0 1.0 1.0"/>
     </material>
   </visual>

   <collision>
     <origin xyz="0 0 0" rpy="0 1.5707 1.5707"/>
     <geometry>
       <cylinder radius="0.1" length="0.05"/>
     </geometry>
   </collision>
 </link>

 <link name="right_wheel">
   <inertial>
     <origin xyz="0 0 0" rpy="0 1.5707 1.5707"/>
     <mass value="5"/>
     <inertia ixx="100"  ixy="0"  ixz="0" iyy="100" iyz="0" izz="100" />
   </inertial>

   <visual>
     <origin xyz="0 0 0" rpy="0 1.5707 1.5707"/>
     <geometry>
       <cylinder radius="0.1" length="0.05"/>
     </geometry>
     <material name="Cyan">
       <color rgba="0 1.0 1.0 1.0"/>
     </material>
   </visual>

   <collision>
     <origin xyz="0 0 0" rpy="0 1.5707 1.5707"/>
     <geometry>
       <cylinder radius="0.1" length="0.05"/>
     </geometry>
   </collision>
 </link>
"""

## Create `joints` for the two wheels

Add the following to the `my_robot.xacro` file (before </robot>)

"""

  <joint type="continuous" name="left_wheel_hinge">
    <origin xyz="0 0.15 0" rpy="0 0 0"/>
    <child link="left_wheel"/>
    <parent link="chassis"/>
    <axis xyz="0 1 0" rpy="0 0 0"/>
    <limit effort="10000" velocity="1000"/>
    <dynamics damping="1.0" friction="1.0"/>
  </joint>


  <joint type="continuous" name="right_wheel_hinge">
    <origin xyz="0 -0.15 0" rpy="0 0 0"/>
    <child link="right_wheel"/>
    <parent link="chassis"/>
    <axis xyz="0 1 0" rpy="0 0 0"/>
    <limit effort="10000" velocity="1000"/>
    <dynamics damping="1.0" friction="1.0"/>
  </joint>


"""

# Robot sensors - Camera


Add the following to the `my_robot.xacro` file (before </robot>)

"""

<link name="camera">
   <inertial>
     <origin xyz="0 0 0" rpy="0 0 0"/>
     <mass value="0.1"/>
     <inertia ixx="1e-6"  ixy="0"  ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
   </inertial>

   <visual>
     <origin xyz="0 0 0" rpy="0 0 0"/>
     <geometry>
       <box size="0.05 0.05 0.05" />
     </geometry>
     <material name="red" />
   </visual>

   <collision>
     <origin xyz="0 0 0" rpy="0 0 0"/>
     <geometry>
       <box size="0.05 0.05 0.05" />
     </geometry>
   </collision>
 </link>


  <joint type="fixed" name="camera_joint">
    <origin xyz="0.2 0 0" rpy="0 0 0"/>
    <child link="camera"/>
    <parent link="chassis"/>
    <axis xyz="0 1 0" rpy="0 0 0"/>
  </joint>


"""

# Robot sensors - Lidar

## STEP1: Create `meshes` directory

$ cd /home/workspace/catkin_ws/src/my_robot/
$ mkdir meshes


## STEP2: Now, download 'hokuyo.dae' file ad place it under `meshes` directory
Gazebo shares the mesh files for its entire library of models:

http://models.gazebosim.org/

'hokuyo.dae' can be found here:

http://models.gazebosim.org/hokuyo/meshes/

## STEP3: Add the Hokuyo sensor to `my_robot.xacro` with this code

"""

<link name="hokuyo">
   <inertial>
     <origin xyz="0 0 0" rpy="0 0 0"/>
     <mass value="1e-5"/>
     <inertia ixx="1e-6"  ixy="0"  ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
   </inertial>

   <visual>
     <origin xyz="0 0 0" rpy="0 0 0"/>
     <geometry>
       <mesh filename="package://my_robot/meshes/hokuyo.dae" />
     </geometry>
     
   </visual>

   <collision>
     <origin xyz="0 0 0" rpy="0 0 0"/>
     <geometry>
       <box size="0.1 0.1 0.1" />
     </geometry>
   </collision>
 </link>


  <joint type="fixed" name="hokuyo_joint">
    <origin xyz="0.15 0 0.1" rpy="0 0 0"/>
    <child link="hokuyo"/>
    <parent link="chassis"/>
    <axis xyz="0 1 0" rpy="0 0 0"/>
  </joint>


"""






